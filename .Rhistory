# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
jhus <- jhus %>%
separate_rows(collaborators, sep = ";\\s*")
# JME - 52
jme <- read.csv(file.choose())
jme <- jme %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
jme <- jme %>%
separate_rows(collaborators, sep = ";\\s*")
View(jme)
View(jme)
# Kano - 53
kano <- read.csv(file.choose())
kano <- kano %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
kano <- kano %>%
separate_rows(collaborators, sep = ";\\s*")
# Kojo - 54
kojo <- read.csv(file.choose())
kojo <- kojo %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
kojo <- kojo %>%
separate_rows(collaborators, sep = ";\\s*")
# Kozzie - 55
kozzie <- read.csv(file.choose())
View(jme)
jme <- jme %>%
mutate(collaborators = map_chr(artists, function(x) {
# Ensure input is character string
if (!is.character(x)) x <- as.character(x)
# Match name = "..." OR name = c("...", "...", ...)
name_match <- str_match(x, 'name\\s*=\\s*(c\\()?\\s*(\\"[^\\)]+\\")')[,3]
if (is.na(name_match)) return(NA_character_)
# Extract all quoted names
names <- str_extract_all(name_match, '\\"(.*?)\\"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = ", ")
}))
View(jme)
jme <- jme %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
# Kozzie - 55
kozzie <- read.csv(file.choose())
kozzie <- kozzie %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
kozzie <- kozzie %>%
separate_rows(collaborators, sep = ";\\s*")
save.image("~/Research/STEVE/Grive Movers/GRIME MOVERS_Edges and Edgelists.RData")
library(spotifyr)
library(readxl)
Sys.setenv(SPOTIFY_CLIENT_ID = '9ed165ce06014bdaa6f0b9b30d2dc299')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '194ee2979a0f418ab30db46da90e4752')
access_token <- get_spotify_access_token()
## I have to do it one by one! - the loop causes a 429
ocean <- get_artist_audio_features(
artist = "0D9N9NxMbXKjmoRI1JVdz8" ,
include_groups = c("album", "single", "appears_on", "compilation"),
return_closest_artist = TRUE,
dedupe_albums = TRUE,
market = NULL,
authorization = access_token
)
library(dplyr)
library(stringr)
# Aj Tracey - 1
aj <- read.csv(file.choose())
aj <- aj %>%
str_subset(artists, "name =")
aj <- aj %>%
str_subset(aj$artists, "name =")
aj <- aj %>%
str_detect(aj$artists, "name =")
aj <- aj %>%
st_extract(aj$artists, "name =")
aj <- aj %>%
str_extract(aj$artists, "name =")
View(aj)
as.character(aj$artists)
aj <- aj %>%
str_extract(aj$artists, "name =")
aj <- aj %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
library(purrr)
library(tidyr)
aj <- aj %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
aj <- aj %>%
separate_rows(collaborators, sep = ";\\s*")
View(aj)
load("~/Research/STEVE/Grive Movers/GRIME MOVERS_Edges and Edgelists.RData")
# Professor Green - 88
prof <- read.csv(file.choose())
prof <- prof %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
prof <- prof %>%
separate_rows(collaborators, sep = ";\\s*")
# Remtrex - 89
remtr <- read.csv(file.choose())
remtr <- remtr %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
remtr <- remtr %>%
separate_rows(collaborators, sep = ";\\s*")
# Roll Deep - 90
roll <- read.csv(file.choose())
roll <- roll %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
roll <- roll %>%
separate_rows(collaborators, sep = ";\\s*")
# Ruff sqwad - 91
ruff <- read.csv(file.choose())
ruff <- ruff %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
ruff <- ruff %>%
separate_rows(collaborators, sep = ";\\s*")
View(ruff)
# Safone  - 92
safone <- read.csv(file.choose())
safone <- safone %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
safone <- safone %>%
separate_rows(collaborators, sep = ";\\s*")
# Saskilla - 93
sask <- read.csv(file.choose())
sask <- sask %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
sask <- sask %>%
separate_rows(collaborators, sep = ";\\s*")
# Scorcher - 94
scorch <- read.csv(file.choose())
scorch <- scorch %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
scorch <- scorch %>%
separate_rows(collaborators, sep = ";\\s*")
save.image("~/Research/STEVE/Grive Movers/GRIME MOVERS_Edges and Edgelists.RData")
grime_edge <- read.csv(file.choose())
View(grime_edge)
grime_edge <- grime_edge %>%
mutate(collaborators = map_chr(artists, ~ {
# Find the name = ... portion (handles single and c("x", "y"))
name_field <- str_extract(.x, 'name\\s*=\\s*(c\\(.*?\\)|"[^"]*")')
if (!is.na(name_field)) {
# Extract all strings inside quotes
names <- str_extract_all(name_field, '"(.*?)"')[[1]]
names <- str_remove_all(names, '"')
paste(names, collapse = "; ")
} else {
NA_character_
}
}))
grime_edge <- grime_edge %>%
separate_rows(collaborators, sep = ";\\s*")
View(grime_edge)
load("~/Research/STEVE/Grive Movers/Data Attempts/Artist By Artist Tracks/WILEY_ALL_TRACKS_R.RData")
View(wiley)
View(wiley)
View(wiley[[23]][[3]])
wiley[[23]][[3]]
wiley[[23]][[3]][[3]]
View(wiley[[23]][[3]])
View(grime_edge)
View(grime_edge)
View(grime_edge)
length(is.na(grime_edge)$collaborators)
length(is.na(grime_edge$collaborators))
View(grime_edge)
grime_edge <- grime_edge %>%
mutate(all_names = str_extract(artists, "name[^,]*,"))
View(grime_edge)
grime_edge <- grime_edge %>%
mutate(self = str_extract(artists, "name[^,]*,")) %>%
mutate(collabs = st_extrat(artists, "name = c([^,]*,)"))
grime_edge <- grime_edge %>%
mutate(self = str_extract(artists, "name[^,]*,")) %>%
mutate(collabs = str_extract(artists, "name = c([^,]*,)"))
View(grime_edge)
grime_edge <- grime_edge %>%
mutate(collabs = str_extract(artists, "name = c\\([^)]*\\),"))
View(grime_edge)
grime_edge <- read.csv(file.choose())
View(grime_edge)
# Step 1 lift the section from string field
grime_edge <- grime_edge %>%
mutate(collabs = str_extract(artists, "name = c\\([^)]*\\),"))
View(grime_edge)
# Step 2 - lift from within the combine
grime_edge <- grime_edge %>%
mutate(collaborators = str_extract(artists, "(?<=c\\().*(?=\\))"))
View(grime_edge)
# Step 2 - lift from within the combine
grime_edge <- grime_edge %>%
mutate(collaborators = str_extract(collabs, "(?<=c\\().*(?=\\))"))
View(grime_edge)
# Step 2 - lift from within the combine
grime_edge <- grime_edge %>%
mutate(collaborators = str_extract(collabs, "(?<=c\\().*(?=\\))")) %>%
str_replace_all(collaborators, '"', '')
# Step 2 - lift from within the combine
grime_edge <- grime_edge %>%
mutate(
collaborators = str_extract(collabs, "(?<=c\\().*(?=\\))"),
collaborators = str_replace_all(collaborators, '"', '')
)
grime_edge <- grime_edge %>%
separate_rows(collaborators, sep = ",")
# Step 2 - lift from within the combine
grime_edge <- grime_edge %>%
mutate(
collaborators = str_extract(collabs, "(?<=c\\().*(?=\\))"),
collaborators = str_replace_all(collaborators, '"', ''),
collaborators = str_replace_all(collaborators, ', ', ','),
)
grime_edge <- grime_edge %>%
separate_rows(collaborators, sep = ",")
grime_edge <- read.csv(file.choose())
# Step 1 lift the section from string field
grime_edge <- grime_edge %>%
mutate(collabs = str_extract(artists, "name = c\\([^)]*\\),"))
# Step 2 - lift from within the combine
grime_edge <- grime_edge %>%
mutate(
collaborators = str_extract(collabs, "(?<=c\\().*(?=\\))"),
collaborators = str_replace_all(collaborators, '"', ''),
collaborators = str_replace_all(collaborators, ', ', ','),
)
grime_edge <- grime_edge %>%
separate_rows(collaborators, sep = ",")
library(dplyr)
library(stringr)
library(tidyr)
grime_edge <- read.csv(file.choose())
# Step 1 lift the section from string field
grime_edge <- grime_edge %>%
mutate(collabs = str_extract(artists, "name = c\\([^)]*\\),"))
# Step 2 - lift from within the combine
grime_edge <- grime_edge %>%
mutate(
collaborators = str_extract(collabs, "(?<=c\\().*(?=\\))"),
collaborators = str_replace_all(collaborators, '"', ''),
collaborators = str_replace_all(collaborators, ', ', ','),
)
grime_edge <- grime_edge %>%
separate_rows(collaborators, sep = ",")
View(grime_edge)
# Replace NA in collaborators with main artist (self loop)
grime_edge <- grime_edge %>%
mutate(collaborators = if_else(is.na(collaborators), artist_name, collaborators))
View(grime_edge)
# 2 Filter year (check the dates we have)
gime_edge_filtered <- grime_edge %>%
filter(album_release_year == "2003" & album_release_year == "2016")
View(gime_edge_filtered)
# 2 Filter year (check the dates we have)
gime_edge_filtered <- grime_edge %>%
filter(album_release_year >= 2003 & album_release_year <= 2016)
View(gime_edge_filtered)
# 3 Remove nongrime (only 122 artists)
grime_artists <- grime_edge_filtered %>%
unique(artist_name)
# 3 Remove nongrime (only 122 artists)
grime_artists <- gime_edge_filtered %>%
unique(artist_name)
# 2. Remove non grime artists (only 122 artists)
gime_edge_filtered <- grime_edge %>%
filter(collaborators %in% artist_name)
# 3 Filter year (check the dates we have)
gime_edge_filtered <- gime_edge_filtered %>%
filter(album_release_year >= 2003 & album_release_year <= 2016)
View(gime_edge_filtered)
# 4 as.date() the album release date
str(grime_edge_filtered$album_release_date)
grime_edge <- read.csv(file.choose())
# Step 1 lift the section from string field
grime_edge <- grime_edge %>%
mutate(collabs = str_extract(artists, "name = c\\([^)]*\\),"))
# Step 2 - lift from within the combine
grime_edge <- grime_edge %>%
mutate(
collaborators = str_extract(collabs, "(?<=c\\().*(?=\\))"),
collaborators = str_replace_all(collaborators, '"', ''),
collaborators = str_replace_all(collaborators, ', ', ','),
)
grime_edge <- grime_edge %>%
separate_rows(collaborators, sep = ",")
# Replace NA in collaborators with main artist (self loop)
grime_edge <- grime_edge %>%
mutate(collaborators = if_else(is.na(collaborators), artist_name, collaborators))
# 2. Remove non grime artists (only 122 artists)
grime_edge_filtered <- grime_edge %>%
filter(collaborators %in% artist_name)
grime_edge <- read.csv(file.choose())
# Step 1 lift the section from string field
grime_edge <- grime_edge %>%
mutate(collabs = str_extract(artists, "name = c\\([^)]*\\),"))
# Step 2 - lift from within the combine
grime_edge <- grime_edge %>%
mutate(
collaborators = str_extract(collabs, "(?<=c\\().*(?=\\))"),
collaborators = str_replace_all(collaborators, '"', ''),
collaborators = str_replace_all(collaborators, ', ', ','),
)
grime_edge <- grime_edge %>%
separate_rows(collaborators, sep = ",")
# Replace NA in collaborators with main artist (self loop)
grime_edge <- grime_edge %>%
mutate(collaborators = if_else(is.na(collaborators), artist_name, collaborators))
# 2. Remove non grime artists (only 122 artists)
grime_edge_filtered <- grime_edge %>%
filter(collaborators %in% artist_name)
# 3 Filter year (check the dates we have)
grime_edge_filtered <- grime_edge_filtered %>%
filter(album_release_year >= 2003 & album_release_year <= 2016)
# 4 as.date() the album release date
str(grime_edge_filtered$album_release_date)
as.date(grime_edge_filtered$album_release_date)
grime_edge_filtered$album_release_date <- as.Date(grime_edge_filtered$album_release_date, format = "%d/%m/%Y")
# 4 as.date() the album release date
str(grime_edge_filtered$album_release_date)
# Node level characteristic  - Grime movers, gender
grime_edge_filtered$og <- ifelse(artist_name == c("Lethal Bizzle", "
Wiley", "Skepta", "Dizzee Rascal", "Jammer"), 1, 0)
# Node level characteristic  - Grime movers, gender
grime_edge_filtered$og <- ifelse(grime_edge_filtered$artist_name == c("Lethal Bizzle", "Wiley", "Skepta", "Dizzee Rascal", "Jammer"), 1, 0)
# Node level characteristic  - Grime movers, gender
grime_edge_filtered$og <- ifelse(
grime_edge_filtered$artist_name %in% c("Lethal Bizzle", "Wiley", "Skepta", "Dizzee Rascal", "Jammer"), 1, 0)
View(grime_edge_filtered)
# 5 edgelist (from to) edge data (date, musical characteristics)
edges <- grime_edge_filtered %>%
select(artist_name, collaborators, album_release_date, danceability, energy, key, loudness, speechiness, acousticness, instrumentalness, liveness, valence, tempo, time_signature, explicit, key_mode)
View(edges)
nodes <- grime_edge_filtered %>%
select(artist_name, og) %>%
distinct
View(nodes)
View(grime_edge_filtered)
# Network  -- Album yer or release date?
field <- grime_edge_filtered %>%
group_by(album_release_year) %>%
summarise(
avg_tempo = mean(tempo, na.rm = TRUE),
avg_dance = mean(danceability, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE),
avg_loudness = mean(loudness, na.rm = TRUE),
avg_speechiness = mean(speechiness, na.rm = TRUE),
avg_acousticness = mean(acousticness, na.rm = TRUE),
avg_instrumentalness = mean(instrumentalness, na.rm = TRUE),
avg_valence = mean(valence, na.rm = TRUE),
avg_liveness = mean(liveness, na.rm = TRUE)
) %>%
ungroup()
View(field)
