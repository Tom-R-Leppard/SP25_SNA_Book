{
  "hash": "79126dc274267591344c1991dc22307c",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n\n\n\n\n\n\n\n# Two Mode Networks - Adjacency Matrix\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n:::\n\n\n\n\n\n\n\n\nThis script is intended for learning how to work with two-mode network data. It uses some data I put together about Characters from the Harry Potter movies.\n\n## Getting to Know the Data\n\nMost of the info came from this site - https://harrypotter.fandom.com/wiki/Dumbledore%27s_Army I.e. I googled \"list of prefects at hogwarts\" then deferred to that above wiki. Same for phoenix, death eaters etc.\n\nI then checked each person on google to see what house they were in - some are missing and NA because they are fake characters from the movies or the wiki page.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhp <- read.csv(file.choose(),header=TRUE,row.names=1) ## select harry_potter_two_mode_AM.csv\n\nhp_mat <- as.matrix(hp)\n\nhead(hp_mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 Phoenix Dumbeldore.s.Army Death.Eaters Inquisitorial.Squad\nAlbus Dumbledore       1                 0            0                   0\nRemus Lupin            1                 0            0                   0\nMolly Weasley          1                 0            0                   0\nSiruis Black           1                 0            0                   0\nSeverus Snape          1                 0            1                   0\nAlastor Moody          1                 0            0                   0\n                 Prefect Gryffindor Ravenclaw Hufflepuff Slytherin\nAlbus Dumbledore       1          1         0          0         0\nRemus Lupin            1          1         0          0         0\nMolly Weasley          0          1         0          0         0\nSiruis Black           0          1         0          0         0\nSeverus Snape          0          0         0          0         1\nAlastor Moody          0          0         0          1         0\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n### Two Mode Adjacency Matrices\n\nSo, here we have a two mode adjacency matrix. You will notice some things that are similar to you, perhaps the 1/0 nature of a matrix. But this is slightly different. The columns no longer reflect the same names as the rows. Now, instead of an i,j matrix we have an i,g (group) matrix. This means that there is no diagonal. Why? Well, because the names at the top of the matrix (columns) are different from the side (rows). Here then, I is sending to the group. Rather, we talk about this, usually, in terms of affiliation. So, i is affiliated with the group (or not).\n\nFor R to understand this is a two mode network matrix, we use a slightly different command than a regular matrix. graph_from_biadjacency_matrix() is the current function where R recognises the separate column names as one type of node and the row names as another. For this to truly be a two mode network, they have to be distinct.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhp_aff <- graph_from_biadjacency_matrix(hp_mat)\n\n\nplot(hp_aff)\n```\n\n::: {.cell-output-display}\n![](Two-Mode-Networks---AM_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n## Visualising Two Mode Networks\n\nLet's make the visualisation much clearer between the two types of nodes.\n\nI do this by changing the shape and the colour of each type of node. I set a vector with the colours and shapes I want\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshapes <- c(\"circle\", \"square\")\ncolors <-c(\"green\", \"orange\")\n```\n:::\n\n\n\n\n\n\n\n\nThen we can plot them based on these design parameters\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar =c(5,0,2,0))\nplot(hp_aff, vertex.color=colors[V(hp_aff)$type+1],\n     vertex.shape=shapes[V(hp_aff)$type+1], vertex.label.cex = 0.5, vertex.size = 7, main = \"Harry Potter\", sub = \"Characters Connected to Groups\")\n```\n\n::: {.cell-output-display}\n![](Two-Mode-Networks---AM_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nHere, I tell R to use the indices I’ve defined in the shapes and colors vectors and apply those to the network using the vertex.shape and vertex.color arguments. Notice that I need to state type + 1 in both of these arguments. It might look a bit unusual at first, but it makes sense once we take a closer look at what R does behind the scenes.\n\nThe \"type\" vertex characteristic is stored as TRUE or FALSE. You can verify this by running the code V(hp_aff)\\$type. This will display a long list of TRUE and FALSE values, which are stored in R as logical values: TRUE is equivalent to 1, and FALSE is equivalent to 0. Meanwhile, the index values for our shapes and colors vectors are stored differently. R always starts indexing at 1. In our colors vector, \"green\" is stored at index 1 and \"orange\" at index 2. For the shapes vector, \"circle\" is stored at index 1 and \"square\" at index 2.\n\nThus, there’s a mismatch between how the \"type\" characteristic is stored (as 1/0) and the way the shapes and colors vectors are indexed (which start from 1). To fix this, we add +1 to the type values, so that FALSE (which is stored as 0) becomes 1, and TRUE (which is stored as 1) becomes 2.\n\nIn this network, the second mode (which represents the \"groups\" in the bipartite network) is always considered to be the \"TRUE\" type. So, this means that the \"characters\" (the first mode, FALSE or 0) are displayed with green circles, and the \"groups\" (the second mode, TRUE or 1) are displayed with orange squares.\n\nLet's visualise different centrality measures on this two-mode network\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar =c(0,0,0,0))\nplot(hp_aff, vertex.color=colors[V(hp_aff)$type+1],\n     vertex.shape=shapes[V(hp_aff)$type+1], vertex.size = betweenness(hp_aff)/100, vertex.label = NA)\n```\n\n::: {.cell-output-display}\n![](Two-Mode-Networks---AM_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(hp_aff, vertex.color=colors[V(hp_aff)$type+1],\n     vertex.shape=shapes[V(hp_aff)$type+1], vertex.label = degree(hp_aff), vertex.label.cex = 0.75)\n```\n\n::: {.cell-output-display}\n![](Two-Mode-Networks---AM_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nThese are great, but do not quite capture the bipartite (two-mode) nature of the network. Igraph has a specific layout option that can help emphasise this.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar =c(0,0,0,0))\nplot(hp_aff, vertex.color=colors[V(hp_aff)$type+1],\n     vertex.shape=shapes[V(hp_aff)$type+1], vertex.label = NA, layout = layout_as_bipartite(hp_aff))\n```\n\n::: {.cell-output-display}\n![](Two-Mode-Networks---AM_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Two-Mode-Networks---AM_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}