{
  "hash": "c423e58abf0eb70eff9bca607355de0d",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n:::\n\n\n\n\n\n\n\n\n# Visualisations - Intermediate\n\nFirst, I bring in some data on Grime musicians and their collaborations with each other in 2008. Then I clean the network a little bit by deleting the self-loops.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrime_edge_list <- read.csv(file.choose(), header = TRUE) # select GRIME_EDGE_LIST_2008 _GRIME ONLY.csv\n\ngrime_08 <- graph_from_data_frame(d= grime_edge_list, directed = TRUE)\nplot(grime_08)\n```\n\n::: {.cell-output-display}\n![](Intermediate-Visualisation_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngrime_08_clean <- delete.edges(grime_08, E(grime_08)[which_loop(grime_08)])\n\nplot(grime_08_clean)\n```\n\n::: {.cell-output-display}\n![](Intermediate-Visualisation_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n## Visualising Centrality - Node Size\n\nNow, using data internal to your graph object you can visualise central people in the network using the vertex.size() argument.\n\n### Degree Centrality\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(0,0,0,0))\nplot(grime_08_clean, vertex.size = degree(grime_08_clean)*2, edge.arrow.size = 0.5)\n```\n\n::: {.cell-output-display}\n![](Intermediate-Visualisation_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n### Betweenness Centrality\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(0,0,0,0))\nplot(grime_08_clean, vertex.size = betweenness(grime_08_clean)*2, edge.arrow.size = 0.5)\n```\n\n::: {.cell-output-display}\n![](Intermediate-Visualisation_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nAlternatively, you can use the labels to demonstrate centrality\n\n## Visualising Centrality - Node Labels\n\n### Degree\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(0,0,0,0))\nplot(grime_08_clean, vertex.label = degree(grime_08_clean))\n```\n\n::: {.cell-output-display}\n![](Intermediate-Visualisation_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n### Betweenness\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(0,0,0,0))\nplot(grime_08_clean, vertex.label = betweenness(grime_08_clean))\n```\n\n::: {.cell-output-display}\n![](Intermediate-Visualisation_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n## Visualising Relationships\n\nWhat about visualising the nature of the relationships? The edges?\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(0,0,0,0))\nplot(grime_08_clean, edge.width = E(grime_08_clean)$collab_weight, edge.arrow.size = 0.5, vertex.size = 6, vertex.label = NA)\n```\n\n::: {.cell-output-display}\n![](Intermediate-Visualisation_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(mar = c(0,0,0,0))\nplot(grime_08_clean, edge.width = E(grime_08_clean)$collab_weight, edge.label = E(grime_08_clean)$collab_weight, edge.arrow.size = 0.5, vertex.size = 6, vertex.label = NA) \n```\n\n::: {.cell-output-display}\n![](Intermediate-Visualisation_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n## Node Level Characteristics\n\nNext, you can attach data external to the network (i.e. node characteristics) and visualise those. I bring in a separate .csv file that has various variables that pertain to the nodes. These are fake characteristics that I made up.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrime_nodes <- read.csv(file.choose()) \nhead(grime_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           node fake_sales sex\n1       Asher D         10   m\n2 Dizzee Rascal         20   m\n3 Lethal Bizzle         50   m\n4         Wiley         70   m\n5   Treble Clef        100   m\n6       Shystie         95   f\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nTake a look at this to see what we have available. 2 variables - fake sales (continuous) and the artist's sex (categorical - dichotomous)\n\nNow we can create a network object that has both the network data and the node characteristics. This section uses the vertices = argument which tells R that there are edges and node characteristics as part of the network. I also clean the selfloops from this edgelist.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrime_full <- graph_from_data_frame(grime_edge_list, vertices = grime_nodes, directed = TRUE)\ngrime_full_clean <- delete.edges(grime_full, E(grime_full)[which_loop(grime_full)])\n```\n:::\n\n\n\n\n\n\n\n\nWe can use these node attributes to visualise more about the network\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsex <-ifelse(V(grime_full_clean)$sex == \"f\", \"red\", \"white\")\n\npar(mar = c(0,0,0,0))\nplot(grime_full_clean, vertex.color = sex)\n```\n\n::: {.cell-output-display}\n![](Intermediate-Visualisation_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nWe can also set the vertex characteristics to reflect the continuous variable. In this case, the artists' fake sales.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(0,0,0,0))\nplot(grime_full_clean, vertex.size = V(grime_full_clean)$fake_sales/100)\n```\n\n::: {.cell-output-display}\n![](Intermediate-Visualisation_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Intermediate-Visualisation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}