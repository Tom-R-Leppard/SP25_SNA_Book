{
  "hash": "fb6fe18eadc72622451af4bc9b929afa",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n:::\n\n\n\n\n\n\n\n\n# Cleaning Network Data - Trimming and Adding\n\nThis script is intended to help you to clean up network data that you have collected or got access to. One very common issue with cleaning network data is knowing what to do with isolates. Isolates are those who are a part of your network, but who have no connections to others in the group. Isolates are stored in network data differently depending on how your data are stored.\n\nIf your data are stored in an adjacency matrix, then isolates are those with no 1s in the matrix. Ensuring that R recognises them as isolated is very simple. Bring in the data, and then convert it into a matrix. Any that are isolated will show as isolates.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhog_crush_matrix <- read.csv(file.choose(), row.names = 1, header = TRUE) # select Hogwarts Crushes matrix.csv\ncrush_matrix <- as.matrix(hog_crush_matrix)\nhog_crush_net_mat <- graph_from_adjacency_matrix(crush_matrix, mode = \"directed\", diag = FALSE)\nplot(hog_crush_net_mat)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nHowever, things are not as straightforward when you are working with edgelists.With this structure, you have only two columns, one for senders and the other for receivers. If there is an individual in the group who neither sends nor receives, what do you do with them? One way of recording such isolates in an edgelist is list them as connected to themselves (known as a self loop). Take a look at this edgelist and you will see that these individuals are connected to themselves\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhog_crush_correct <- read.csv(file.choose(), header=TRUE) # select Hogwarts Crushes Edgelist_SELFLOOPS.csv\n\n#Take a look at the data\nhog_crush_correct\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            Crusher            Crush\n1      Harry Potter    Ginny Weasley\n2      Harry Potter        Cho Chang\n3       Ron Weasley Hermione Granger\n4  Hermione Granger      Ron Weasley\n5       Ron Weasley   Lavender Brown\n6     Ginny Weasley     Harry Potter\n7       Lily Potter     James Potter\n8      James Potter      Lily Potter\n9     Severus Snape      Lily Potter\n10 Nymphadora Tonks      Remus Lupin\n11      Remus Lupin Nymphadora Tonks\n12   Lavender Brown      Ron Weasley\n13        Cho Chang   Cedric Diggory\n14        Cho Chang     Harry Potter\n15   Cedric Diggory        Cho Chang\n16        McGonagal        McGonagal\n17           Madeye           Madeye\n18        Voldemort        Voldemort\n19         Flitwick         Flitwick\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nNow when you make this a graph object R does something different.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCrush_correct_net <-  graph_from_data_frame(hog_crush_correct, directed = TRUE)\nplot(Crush_correct_net)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nThey have self looped edges!!! These do not look great. To Remove them, you can use the delete_edges() command and select the edges that are looped by using the E() command coupled with the is.loop() option.This is also something you will need to remember to do every time you bring in an edgelist with isolates.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCrush_correct_net  <- delete_edges(Crush_correct_net , E(Crush_correct_net )[which_loop(Crush_correct_net )])\nplot(Crush_correct_net)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nAnother way to deal with isolates from an edgelist is to list noone in the \"to\" column. In other words, you list the name of the person in your network but leave the cell next to them blank. However, this approach also has additional steps to take before it is clean and ready to go.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhog_crush_wrong <- read.csv(file.choose(), header=TRUE) # select Hogwarts Crushes Edgelist_EMPTY NODE.csv\n```\n:::\n\n\n\n\n\n\n\n\nTake a look at the edgeist now it is in and you will see I added a few more characters to this group: Madeye, Flitwick, McGonagal, and Voldemort. They are all listed in the \"Crusher\" (from) column but have no connection to anyone in the \"crush\" column. This makes sense, since we know little about their romances from the Harry Potter Saga.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhog_crush_wrong\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            Crusher            Crush\n1      Harry Potter    Ginny Weasley\n2      Harry Potter        Cho Chang\n3       Ron Weasley Hermione Granger\n4  Hermione Granger      Ron Weasley\n5       Ron Weasley   Lavender Brown\n6     Ginny Weasley     Harry Potter\n7       Lily Potter     James Potter\n8      James Potter      Lily Potter\n9     Severus Snape      Lily Potter\n10 Nymphadora Tonks      Remus Lupin\n11      Remus Lupin Nymphadora Tonks\n12   Lavender Brown      Ron Weasley\n13        Cho Chang   Cedric Diggory\n14        Cho Chang     Harry Potter\n15   Cedric Diggory        Cho Chang\n16        McGonagal                 \n17           Madeye                 \n18        Voldemort                 \n19         Flitwick                 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nWhen we make this a graph object, R does something funky.\n\nThe new characters are all connected to a nameless node and it looks, on visual inspection, that they all have a crush on the same person.\n\nI have highlighted that node in the visualization below. The red node is nameless because the edgelist has empty (nameless) cells.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrush_wrong_net <- graph_from_data_frame(hog_crush_wrong, directed = TRUE)\nplot(crush_wrong_net)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nV(crush_wrong_net)$wrong <- ifelse(V(crush_wrong_net)$name %in% c(\"\"), \"red\", \"white\")\nplot(crush_wrong_net, vertex.color = V(crush_wrong_net)$wrong)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nOne way to deal with this is to delete the superfluous node. You do this using the delete_vertex() function. ##This fixes the issue once you have the data in Rstudio, but the issue still exists in your dataset. If you choose to structure your network data this way, you will have to remember to remove this node every time. This may be harder to do/realise when dealing with large dense networks.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrush_wrong_net <- delete_vertices(crush_wrong_net, \"\")\nplot(crush_wrong_net)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nOther things to do to clean a network object once in Rstudio.\n\nYou may want to add or remove nodes and vertices (nodes) from your network. Only do this if you have legitimate reason to.\n\nDeleting Nodes. You might decide to remove one or more nodes from your network. For example, in this hogwarts dataset, we may want to remove those who are not students at Hogwarts (i.e. remove teachers or adults). To do this, you would use the delete_vertices() option\n\nBasic - You can delete them one-by-one.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhog_crush_students <- delete_vertices(Crush_correct_net, \"Voldemort\")\nplot(hog_crush_students)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nPro tip - if you are deleting multiple, it is worth making a vector with all the names of those you want to remove, then use the delete_vertices() command\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhog_adults <- c(\"Severus Snape\", \"Lily Potter\", \"James Potter\", \"Nymphadora Tonks\", \"Remus Lupin\", \"Voldemort\", \"Flitwick\", \"McGonagal\", \"Madeye\")\nhog_crush_students <- delete_vertices(Crush_correct_net, hog_adults)\nplot(hog_crush_students)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nThis new version removed all unwanted nodes at once.\n\n## Deleting isolates.\n\nSometimes, you want to remove the isolated nodes from your network because you only care about those who have connections to others. To do this, you identify those with no connections (degree = 0) and them remove them from your network. I suggest making a new object with this sub network.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhog_crush_isol <- which(degree(Crush_correct_net)==0)\n```\n:::\n\n\n\n\n\n\n\n\nNow you use the delete_vertices() command and remove those in the vector you just created (those with degree = 0)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCrush_no_isol <-delete_vertices(Crush_correct_net, hog_crush_isol)\nplot(Crush_no_isol)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nNow this new object has only those nodes with ties to others in the network.\n\n## Adding Nodes\n\nUse add.vertices(graph name, number of additional vertices, attribute = )\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrush_added <- add.vertices(Crush_correct_net, 1, name = \"Michael Corner\")\nplot(crush_added)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n## Deleting edges\n\nYou may want to delete edges between two nodes.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_to_delete <- E(Crush_correct_net)[(.from(\"Remus Lupin\") & .to(\"Nymphadora Tonks\"))]\nCrush_edge_delete <- delete_edges(Crush_correct_net, edges_to_delete)\nplot(Crush_edge_delete)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nTo delete all edges between two nodes\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_to_delete2 <- E(Crush_correct_net)[(.from(\"Remus Lupin\") & .to(\"Nymphadora Tonks\")) | .from(\"Nymphadora Tonks\") & .to(\"Remus Lupin\")]\nCrush_edge_delete <- delete_edges(Crush_correct_net, edges_to_delete2)\nplot(Crush_edge_delete)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n## Add Edges\n\nUse add.edges().\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrush_added <- add.edges(crush_added, edges = c(\"Michael Corner\", \"Ginny Weasley\"))\nplot(crush_added)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nNow to add the reciprocated tie\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrush_added <- add.edges(crush_added, edges = c(\"Ginny Weasley\", \"Michael Corner\"))\nplot(crush_added)\n```\n\n::: {.cell-output-display}\n![](Cleaning-Network-Data---Trimming-and-Adding_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Cleaning-Network-Data---Trimming-and-Adding_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}