))
}
}
}
# Create Sankey diagram
p <- sankeyNetwork(
Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
LinkGroup = "major",
units = "students",
fontSize = 11,
nodeWidth = 30,
nodePadding = 10,
height = 800,
width = 1200,
sinksRight = TRUE,
colourScale = JS(color_scale_js)
)
# Create Sankey diagram
p <- sankeyNetwork(
Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
LinkGroup = "major",
units = "students",
fontSize = 11,
nodeWidth = 30,
nodePadding = 10,
height = 800,
width = 1200,
sinksRight = TRUE
)
# Add title
p <- htmlwidgets::prependContent(p,
htmltools::tags$h2(
"Student Flow Through DSSG Program by Original Major (with Student IDs)",
style = "text-align: center; color: #333; margin-bottom: 20px;"
)
)
# Print detailed statistics
cat("\nStudent Flow Details:\n")
for(period in periods[-1]) {
cat(sprintf("\n%s Distribution:\n", period))
period_lower <- tolower(period)
active_students <- data %>%
filter(!is.na(!!sym(period_lower))) %>%
group_by(!!sym(period_lower)) %>%
summarise(
count = n(),
student_ids = paste(sort(student_id), collapse=",")
)
print(active_students)
}
# Return the Sankey diagram
p
knitr::opts_chunk$set(echo = TRUE) (Warnings = FALSE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(igraph)
library(ndtv)
library(tsna)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(igraph)
library(ndtv)
library(tsna)
setwd("~/Teaching/SNA/Spring 2025/FINAL PROJECT")
edge_list <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
my_graph <- graph_from_data_frame(d=edge_list, directed = TRUE)
plot(my_graph, vertex.label = NA)
my_graph_clean <- delete.edges(my_graph, E(my_graph)[is.loop(my_graph)])
my_graph_clean <- delete.edges(my_graph, E(my_graph)[is.loop(my_graph)])
my_graph_clean <- delete_vertices(my_graph_clean, degree(my_graph_clean) == 0)
my_graph_clean <- delete.edges(my_graph, E(my_graph)[is.loop(my_graph)])
class(my_graph)
my_graph_clean <- delete.edges(my_graph, E(my_graph)[is.loop(my_graph)])
my_graph_clean <- delete_edges(my_graph, E(my_graph)[is.loop(my_graph)])
my_graph_clean <- delete_vertices(my_graph_clean, degree(my_graph_clean) == 0)
my_graph_clean <- delete_vertices(my_graph_clean, degree(my_graph_clean) == 0)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(igraph)
library(ndtv)
library(tsna)
setwd("~/Teaching/SNA/Spring 2025/FINAL PROJECT")
edge_list <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
my_graph <- graph_from_data_frame(d=edge_list, directed = TRUE)
plot(my_graph, vertex.label = NA)
my_graph_clean <- delete_edges(my_graph, E(my_graph)[is.loop(my_graph)])
my_graph_clean <- delete_vertices(my_graph_clean, degree(my_graph_clean) == 0)
my_graph_clean <- delete.vertices(my_graph_clean, degree(my_graph_clean) == 0)
my_graph_clean <- delete_vertices(my_graph_clean, degree(my_graph_clean) == 0)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(igraph)
setwd("~/Teaching/SNA/Spring 2025/FINAL PROJECT")
edge_list <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
my_graph <- graph_from_data_frame(d=edge_list, directed = TRUE)
plot(my_graph, vertex.label = NA)
my_graph_clean <- delete_edges(my_graph, E(my_graph)[is.loop(my_graph)])
my_graph_clean <- delete_vertices(my_graph_clean, degree(my_graph_clean) == 0)
plot(my_graph_clean, vertex.label = NA)
subv <- c('Wiley','Jammer','Flowdan', 'Ice Kid')
random_sub <- subgraph(graph=my_graph_clean, vids=subv)
plot(random_sub)
random_sub2 <- delete_vertices(random_sub, V(random_sub)$name == "Ice Kid")
plot(random_sub2, main = "Ice Kid Removed")
edge_list_08 <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
grime_08 <- graph_from_data_frame(d=edge_list_08, directed = TRUE)
edge_list_10 <- read.csv("GRIME_EDGE_LIST_2010_GRIME ONLY.csv", header = TRUE)
edge_list_08 <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
grime_08 <- graph_from_data_frame(d=edge_list_08, directed = TRUE)
edge_list_10 <- read.csv("GRIME_EDGE_LIST_2010 _GRIME ONLY ONLY.csv", header = TRUE)
edge_list_08 <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
grime_08 <- graph_from_data_frame(d=edge_list_08, directed = TRUE)
edge_list_10 <- read.csv("GRIME_EDGE_LIST_2010 _GRIME ONLY.csv", header = TRUE)
grime_10 <- graph_from_data_frame(d=edge_list_10, directed = TRUE)
edge_list_12 <- read.csv("GRIME_EDGE_LIST_2012 _GRIME ONLY.csv", header = TRUE)
grime_12 <- graph_from_data_frame(d=edge_list_12, directed = TRUE)
edge_list_14 <- read.csv("GRIME_EDGE_LIST_2014_GRIME ONLY.csv", header = TRUE)
edge_list_08 <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
grime_08 <- graph_from_data_frame(d=edge_list_08, directed = TRUE)
edge_list_10 <- read.csv("GRIME_EDGE_LIST_2010 _GRIME ONLY.csv", header = TRUE)
grime_10 <- graph_from_data_frame(d=edge_list_10, directed = TRUE)
edge_list_12 <- read.csv("GRIME_EDGE_LIST_2012 _GRIME ONLY.csv", header = TRUE)
grime_12 <- graph_from_data_frame(d=edge_list_12, directed = TRUE)
edge_list_14 <- read.csv("GRIME_EDGE_LIST_2014 _GRIME ONLY.csv", header = TRUE)
grime_14 <- graph_from_data_frame(d=edge_list_14, directed = TRUE)
grime_08_clean <- delete_edges(grime_08, E(grime_08)[is.loop(grime_08)])
grime_08_clean <- delete_vertices(grime_08_clean, degree(grime_08_clean) == 0)
grime_10_clean <- delete_edges(grime_10, E(grime_10)[is.loop(grime_10)])
grime_10_clean <- delete_vertices(grime_10_clean, degree(grime_10_clean) == 0)
grime_12_clean <- delete_edges(grime_12, E(grime_12)[is.loop(grime_12)])
grime_12_clean <- delete_vertices(grime_12_clean, degree(grime_12_clean) == 0)
grime_14_clean <- delete_edges(grime_14, E(grime_14)[is.loop(grime_14)])
grime_14_clean <- delete_vertices(grime_14_clean, degree(grime_14_clean) == 0)
library(intergraph)
grime_net_1 <- asNetwork(grime_08)
grime_net_2 <- asNetwork(grime_10)
grime_net_3 <- asNetwork(grime_12)
grime_net_4 <- asNetwork(grime_14)
library(sna)
library(network)
library(networkDynamic)
net_dynamic_4periods <- networkDynamic(network.list = list(grime_net_1,
grime_net_2,
grime_net_3,
grime_net_4), vertex.pid = "vertex.names")
timePrism(net_dynamic_4periods,at=c(0,1, 2,3),
displaylabels=FALSE,planes = TRUE,
label.cex=0.5)
library(intergraph)
grime_net_1 <- asNetwork(grime_08)
grime_net_2 <- asNetwork(grime_10)
grime_net_3 <- asNetwork(grime_12)
grime_net_4 <- asNetwork(grime_14)
library(sna)
library(network)
library(networkDynamic)
library(ndtv)
net_dynamic_4periods <- networkDynamic(network.list = list(grime_net_1,
grime_net_2,
grime_net_3,
grime_net_4), vertex.pid = "vertex.names")
timePrism(net_dynamic_4periods,at=c(0,1, 2,3),
displaylabels=FALSE,planes = TRUE,
label.cex=0.5)
compute.animation(net_dynamic_4periods)
timePrism(net_dynamic_4periods,at=c(0,1, 2,3),
displaylabels=FALSE,planes = TRUE,
label.cex=0.5)
render.d3movie(net_dynamic_4periods,output.mode = 'htmlWidget')
edge_list_08 <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
grime_08 <- graph_from_data_frame(d=edge_list_08, directed = TRUE)
edge_list_10 <- read.csv("GRIME_EDGE_LIST_2010 _GRIME ONLY.csv", header = TRUE)
grime_10 <- graph_from_data_frame(d=edge_list_10, directed = TRUE)
edge_list_12 <- read.csv("GRIME_EDGE_LIST_2012 _GRIME ONLY.csv", header = TRUE)
grime_12 <- graph_from_data_frame(d=edge_list_12, directed = TRUE)
edge_list_14 <- read.csv("GRIME_EDGE_LIST_2014 _GRIME ONLY.csv", header = TRUE)
grime_14 <- graph_from_data_frame(d=edge_list_14, directed = TRUE)
grime_08_clean <- delete_edges(grime_08, E(grime_08)[is.loop(grime_08)])
grime_08_clean <- delete_vertices(grime_08_clean, degree(grime_08_clean) == 0)
library(readxl)
library(networkD3)
library(dplyr)
library(tidyr)
library(purrr)
library(htmlwidgets)
library(webshot)
# Correct function call
links <- read_excel("C:/Users/trleppar/Documents/Research/ELA/NEW/D3Network IDEA/NEW NETWORKD3/sankey_network.xlsx", sheet = "Links")
nodes <- read_excel("C:/Users/trleppar/Documents/Research/ELA/NEW/D3Network IDEA/NEW NETWORKD3/sankey_network.xlsx", sheet = "Nodes")
links <- as.data.frame(links)
nodes <- as.data.frame(nodes)
sankeyNetwork(Links = links, Nodes = nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name")
###### NOW TO GET THE COLOURS RIGHT
class_colors <- c("Arts_1" = "#FF6347",        # Tomato
"Business_1" = "#4682B4",     # SteelBlue
"DSC_1" = "#32CD32",     # LimeGreen
"DSFSG_1" = "#FFD700",         # Gold
"Education_1" = "#8A2BE2",     # BlueViolet
"Health_1" = "#FF1493",  # DeepPink
"Social_1" = "#00FA9A",     #mediumSpringGr
"STEM_1" = "#DC143C",   # Crimson
"Trades_1" = "#20B2AA",
"Arts_2" = "#FF6347",        # Tomato
"Business_2" = "#4682B4",     # SteelBlue
"DSC_2" = "#32CD32",     # LimeGreen
"DSFSG_2" = "#FFD700",         # Gold
"Education_2" = "#8A2BE2",     # BlueViolet
"Health_2" = "#FF1493",  # DeepPink
"Social_2" = "#00FA9A",     #mediumSpringGr
"STEM_2" = "#DC143C",   # Crimson
"Trades_2" = "#20B2AA",
"Arts_3" = "#FF6347",        # Tomato
"Business_3" = "#4682B4",     # SteelBlue
"DSC_3" = "#32CD32",     # LimeGreen
"DSFSG_3" = "#FFD700",         # Gold
"Education_3" = "#8A2BE2",     # BlueViolet
"Health_3" = "#FF1493",  # DeepPink
"Social_3" = "#00FA9A",     #mediumSpringGr
"STEM_3" = "#DC143C",   # Crimson
"Trades_3" = "#20B2AA",
"Arts_4" = "#FF6347",        # Tomato
"Business_4" = "#4682B4",     # SteelBlue
"DSC_4" = "#32CD32",     # LimeGreen
"DSFSG_4" = "#FFD700",         # Gold
"Education_4" = "#8A2BE2",     # BlueViolet
"Health_4" = "#FF1493",  # DeepPink
"Social_4" = "#00FA9A",     #mediumSpringGr
"STEM_4" = "#DC143C",   # Crimson
"Trades_4" = "#20B2AA",
"Arts_5" = "#FF6347",        # Tomato
"Business_5" = "#4682B4",     # SteelBlue
"DSC_5" = "#32CD32",     # LimeGreen
"DSFSG_5" = "#FFD700",         # Gold
"Education_5" = "#8A2BE2",     # BlueViolet
"Health_5" = "#FF1493",  # DeepPink
"Social_5" = "#00FA9A",     #mediumSpringGr
"STEM_5" = "#DC143C",   # Crimson
"Trades_5" = "#20B2AA")  # LightSeaGreen
nodes$color <- class_colors[nodes$name]
(sank_col <- sankeyNetwork(
Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "name",   # Assign group based on class names
colourScale = JS("d3.scaleOrdinal().domain(['Arts_1', 'Business_1', 'DSC_1', 'DSFSG_1', 'Education_1', 'Health_1', 'Social_1', 'STEM_1', 'Trades_1','Arts_2', 'Business_2', 'DSC_2', 'DSFSG_2', 'Education_2', 'Health_2', 'Social_2', 'STEM_2', 'Trades_2', 'Arts_3', 'Business_3', 'DSC_3', 'DSFSG_3', 'Education_3', 'Health_3', 'Social_3', 'STEM_3', 'Trades_3', 'Arts_4', 'Business_4', 'DSC_4', 'DSFSG_4', 'Education_4', 'Health_4', 'Social_4', 'STEM_4', 'Trades_4', 'Arts_5', 'Business_5', 'DSC_5', 'DSFSG_5', 'Education_5', 'Health_5', 'Social_5', 'STEM_5', 'Trades_5']).range(['#FF6347', '#4682B4', '#32CD32', '#FFD700', '#8A2BE2',
'#FF1493', '#00FA9A', '#DC143C', '#20B2AA', '#FF6347', '#4682B4', '#32CD32', '#FFD700', '#8A2BE2',
'#FF1493', '#00FA9A', '#DC143C', '#20B2AA', '#FF6347', '#4682B4', '#32CD32', '#FFD700', '#8A2BE2',
'#FF1493', '#00FA9A', '#DC143C', '#20B2AA', '#FF6347', '#4682B4', '#32CD32', '#FFD700', '#8A2BE2',
'#FF1493', '#00FA9A', '#DC143C', '#20B2AA', '#FF6347', '#4682B4', '#32CD32', '#FFD700', '#8A2BE2',
'#FF1493', '#00FA9A', '#DC143C', '#20B2AA'])")
))
sank_col
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(igraph)
setwd("~/Teaching/SNA/Spring 2025/FINAL PROJECT")
edge_list <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
my_graph <- graph_from_data_frame(d=edge_list, directed = TRUE)
plot(my_graph, vertex.label = NA)
my_graph_clean <- delete_edges(my_graph, E(my_graph)[is.loop(my_graph)])
my_graph_clean <- delete_vertices(my_graph_clean, degree(my_graph_clean) == 0)
plot(my_graph_clean, vertex.label = NA)
num_nodes <- vcount(my_graph_clean)
num_edges <- ecount(my_graph_clean)
data.frame(
nodes = num_nodes,
edges = num_edges
)
subv <- c('Wiley','Jammer','Flowdan', 'Ice Kid')
random_sub <- subgraph(graph=my_graph_clean, vids=subv)
plot(random_sub)
random_sub2 <- delete_vertices(random_sub, V(random_sub)$name == "Ice Kid")
plot(random_sub2, main = "Ice Kid Removed")
load("C:/Users/trleppar/Documents/Teaching/SNA/Spring 2025/DATA/network data_from Steve/bali/bali.rda")
plot(my_graph)
plot(my_graph, vertex.label = NA)
plot(my_graph_clean, vertex.label = NA)
bali
plot(bali)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
setwd("~/Teaching/SNA/Spring 2025/FINAL PROJECT")
edge_list <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
my_graph <- graph_from_data_frame(d=edge_list, directed = TRUE)
plot(my_graph, vertex.label = NA)
my_graph_clean <- delete_edges(my_graph, E(my_graph)[is.loop(my_graph)])
my_graph_clean <- delete_vertices(my_graph_clean, degree(my_graph_clean) == 0)
plot(my_graph_clean, vertex.label = NA)
num_nodes <- vcount(my_graph_clean)
num_edges <- ecount(my_graph_clean)
data.frame(
nodes = num_nodes,
edges = num_edges
)
subv <- c('Wiley','Jammer','Flowdan', 'Ice Kid')
random_sub <- subgraph(graph=my_graph_clean, vids=subv)
plot(random_sub)
random_sub2 <- delete_vertices(random_sub, V(random_sub)$name == "Ice Kid")
plot(random_sub2, main = "Ice Kid Removed")
par(mar = c(0,0,0,0))
par(mfrow = c(1,2))
set.seed(123)
plot(my_graph_clean, layout = layout_with_fr(my_graph_clean), vertex.label.cex = 0.4, vertex.size = 10, edge.arrow.size = 0.4)
set.seed(123)
plot(my_graph_clean, layout = layout_with_fr(my_graph_clean), vertex.label.cex = 0.4, vertex.size = degree(my_graph_clean), edge.arrow.size = 0.4)
edge_list_08 <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
grime_08 <- graph_from_data_frame(d=edge_list_08, directed = TRUE)
edge_list_10 <- read.csv("GRIME_EDGE_LIST_2010 _GRIME ONLY.csv", header = TRUE)
grime_10 <- graph_from_data_frame(d=edge_list_10, directed = TRUE)
edge_list_12 <- read.csv("GRIME_EDGE_LIST_2012 _GRIME ONLY.csv", header = TRUE)
grime_12 <- graph_from_data_frame(d=edge_list_12, directed = TRUE)
edge_list_14 <- read.csv("GRIME_EDGE_LIST_2014 _GRIME ONLY.csv", header = TRUE)
grime_14 <- graph_from_data_frame(d=edge_list_14, directed = TRUE)
grime_08_clean <- delete_edges(grime_08, E(grime_08)[is.loop(grime_08)])
grime_08_clean <- delete_vertices(grime_08_clean, degree(grime_08_clean) == 0)
grime_10_clean <- delete_edges(grime_10, E(grime_10)[is.loop(grime_10)])
grime_10_clean <- delete_vertices(grime_10_clean, degree(grime_10_clean) == 0)
grime_12_clean <- delete_edges(grime_12, E(grime_12)[is.loop(grime_12)])
grime_12_clean <- delete_vertices(grime_12_clean, degree(grime_12_clean) == 0)
grime_14_clean <- delete_edges(grime_14, E(grime_14)[is.loop(grime_14)])
grime_14_clean <- delete_vertices(grime_14_clean, degree(grime_14_clean) == 0)
library(intergraph)
grime_net_1 <- asNetwork(grime_08_clean)
grime_net_2 <- asNetwork(grime_10_clean)
grime_net_3 <- asNetwork(grime_12_clean)
grime_net_4 <- asNetwork(grime_14_clean)
detach("package:igraph", unload=TRUE)
library(sna)
library(network)
library(networkDynamic)
library(ndtv)
net_dynamic_4periods <- networkDynamic(network.list = list(grime_net_1,
grime_net_2,
grime_net_3,
grime_net_4), vertex.pid = "vertex.names")
compute.animation(net_dynamic_4periods)
timePrism(net_dynamic_4periods,at=c(0,1, 2,3),
displaylabels=FALSE,planes = TRUE,
label.cex=0.5)
render.d3movie(net_dynamic_4periods,output.mode = 'htmlWidget')
detach("package:ndtv", unload=TRUE)
detach("package:sna", unload=TRUE)
detach("package:networkDynamic", unload=TRUE)
detach("package:network", unload=TRUE)
library(igraph)
info_map <- cluster_infomap(my_graph_clean)
plot(info_map, my_graph_clean, layout = layout_with_fr(my_graph_clean), vertex.label.cex = 0.4, vertex.size = 10, edge.arrow.size = 0.4)
info_map <- cluster_infomap(my_graph_clean)
par(mar = c(0,0,0,0))
par(mfrow = c(1,1))
plot(info_map, my_graph_clean, layout = layout_with_fr(my_graph_clean), vertex.label.cex = 0.4, vertex.size = 10, edge.arrow.size = 0.4)
info_map <- cluster_infomap(my_graph_clean)
par(mar = c(0,0,0,0))
par(mfrow = c(1,1))
set.seed(123)
plot(info_map, my_graph_clean, layout = layout_with_fr(my_graph_clean), vertex.label.cex = 0.4, vertex.size = 10, edge.arrow.size = 0.4)
info_map
plot(my_graph_clean, layout = layout_with_fr(my_graph_clean), vertex.label.cex = 0.4, vertex.size = 10, edge.arrow.size = 0.4, vertex.color = info_map$membership)
info_map <- cluster_infomap(my_graph_clean)
par(mar = c(0,0,0,0))
par(mfrow = c(1,2))
set.seed(123)
plot(info_map, my_graph_clean, layout = layout_with_fr(my_graph_clean), vertex.label.cex = 0.4, vertex.size = 10, edge.arrow.size = 0.4)
set.seed(123)
plot(my_graph_clean, layout = layout_with_fr(my_graph_clean), vertex.label.cex = 0.4, vertex.size = 10, edge.arrow.size = 0.4, vertex.color = info_map$membership)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
setwd("~/Teaching/SNA/Spring 2025/FINAL PROJECT")
edge_list <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
my_graph <- graph_from_data_frame(d=edge_list, directed = TRUE)
library(igraph)
setwd("~/Teaching/SNA/Spring 2025/FINAL PROJECT")
edge_list <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
my_graph <- graph_from_data_frame(d=edge_list, directed = TRUE)
plot(my_graph, vertex.label = NA)
my_graph_clean <- delete_edges(my_graph, E(my_graph)[is.loop(my_graph)])
my_graph_clean <- delete_vertices(my_graph_clean, degree(my_graph_clean) == 0)
plot(my_graph_clean, vertex.label = NA)
num_nodes <- vcount(my_graph_clean)
num_edges <- ecount(my_graph_clean)
data.frame(
nodes = num_nodes,
edges = num_edges
)
subv <- c('Wiley','Jammer','Flowdan', 'Ice Kid')
random_sub <- subgraph(graph=my_graph_clean, vids=subv)
plot(random_sub)
random_sub2 <- delete_vertices(random_sub, V(random_sub)$name == "Ice Kid")
plot(random_sub2, main = "Ice Kid Removed")
par(mar = c(0,0,0,0))
par(mfrow = c(1,2))
set.seed(123)
plot(my_graph_clean, layout = layout_with_fr(my_graph_clean), vertex.label.cex = 0.4, vertex.size = 10, edge.arrow.size = 0.4)
set.seed(123)
plot(my_graph_clean, layout = layout_with_fr(my_graph_clean), vertex.label.cex = 0.4, vertex.size = degree(my_graph_clean), edge.arrow.size = 0.4)
edge_list_08 <- read.csv("GRIME_EDGE_LIST_2008 _GRIME ONLY.csv", header = TRUE)
grime_08 <- graph_from_data_frame(d=edge_list_08, directed = TRUE)
edge_list_10 <- read.csv("GRIME_EDGE_LIST_2010 _GRIME ONLY.csv", header = TRUE)
grime_10 <- graph_from_data_frame(d=edge_list_10, directed = TRUE)
edge_list_12 <- read.csv("GRIME_EDGE_LIST_2012 _GRIME ONLY.csv", header = TRUE)
grime_12 <- graph_from_data_frame(d=edge_list_12, directed = TRUE)
edge_list_14 <- read.csv("GRIME_EDGE_LIST_2014 _GRIME ONLY.csv", header = TRUE)
grime_14 <- graph_from_data_frame(d=edge_list_14, directed = TRUE)
grime_08_clean <- delete_edges(grime_08, E(grime_08)[is.loop(grime_08)])
grime_08_clean <- delete_vertices(grime_08_clean, degree(grime_08_clean) == 0)
grime_10_clean <- delete_edges(grime_10, E(grime_10)[is.loop(grime_10)])
grime_10_clean <- delete_vertices(grime_10_clean, degree(grime_10_clean) == 0)
grime_12_clean <- delete_edges(grime_12, E(grime_12)[is.loop(grime_12)])
grime_12_clean <- delete_vertices(grime_12_clean, degree(grime_12_clean) == 0)
grime_14_clean <- delete_edges(grime_14, E(grime_14)[is.loop(grime_14)])
grime_14_clean <- delete_vertices(grime_14_clean, degree(grime_14_clean) == 0)
library(intergraph)
grime_net_1 <- asNetwork(grime_08_clean)
grime_net_2 <- asNetwork(grime_10_clean)
grime_net_3 <- asNetwork(grime_12_clean)
grime_net_4 <- asNetwork(grime_14_clean)
detach("package:igraph", unload=TRUE)
library(sna)
library(network)
library(networkDynamic)
library(ndtv)
net_dynamic_4periods <- networkDynamic(network.list = list(grime_net_1,
grime_net_2,
grime_net_3,
grime_net_4), vertex.pid = "vertex.names")
render.d3movie(net_dynamic_4periods,output.mode = 'htmlWidget')
detach("package:ndtv", unload=TRUE)
detach("package:sna", unload=TRUE)
detach("package:networkDynamic", unload=TRUE)
detach("package:network", unload=TRUE)
library(igraph)
betweenness <- betweenness(my_graph_clean)
degree <- degree(my_graph_clean)
data.frame(
degree = degree,
betweenness = betweenness
)
dense <- edge_density(my_graph_clean, loops = FALSE)
recip <- reciprocity(my_graph_clean, ignore.loops = TRUE, mode = c("ratio"))
data.frame (
reciprocity = recip,
density = dense
)
info_map <- cluster_infomap(my_graph_clean)
par(mar = c(0,0,0,0))
par(mfrow = c(1,2))
set.seed(123)
plot(info_map, my_graph_clean, layout = layout_with_fr(my_graph_clean), vertex.label.cex = 0.4, vertex.size = 10, edge.arrow.size = 0.4)
set.seed(123)
plot(my_graph_clean, layout = layout_with_fr(my_graph_clean), vertex.label.cex = 0.4, vertex.size = 10, edge.arrow.size = 0.4, vertex.color = info_map$membership)
detach("package:ndtv", unload=TRUE)
library(intergraph)
grime_net_1 <- asNetwork(grime_08_clean)
grime_net_2 <- asNetwork(grime_10_clean)
grime_net_3 <- asNetwork(grime_12_clean)
grime_net_4 <- asNetwork(grime_14_clean)
detach("package:igraph", unload=TRUE)
library(sna)
library(network)
library(networkDynamic)
library(ndtv)
net_dynamic_4periods <- networkDynamic(network.list = list(grime_net_1,
grime_net_2,
grime_net_3,
grime_net_4), vertex.pid = "vertex.names")
detach("package:ndtv", unload=TRUE)
detach("package:sna", unload=TRUE)
detach("package:networkDynamic", unload=TRUE)
detach("package:network", unload=TRUE)
detach("package:tsna", unload=TRUE)
library(igraph)
load("C:/Users/trleppar/Documents/Teaching/SNA/Spring 2025/DATA/Tom_network_data/Florentine families/florentine.rda")
load("C:/Users/trleppar/Documents/Teaching/SNA/Spring 2025/DATA/Tom_network_data/Florentine families/ifb.rda")
load("C:/Users/trleppar/Documents/Teaching/SNA/Spring 2025/DATA/Tom_network_data/Florentine families/ifm.rda")
load("C:/Users/trleppar/Documents/Teaching/SNA/Spring 2025/DATA/network data_from Steve/bali/bali.rda")
library(igraph)
bali
plot(bali, vertex.label = NA)
adj_bali <- as_adjacency_matrix(bali)
mat_bali <- as.matrix(adj_bali)
bali_dat <- as.data.frame(mat_bali)
View(bali_dat)
setwd("~/Teaching/SNA/Spring 2025/DATA/Tom_network_data/One Mode Network Data/bali")
write.csv("bali_dat, /bali.adj.csv")
write.csv("bali_dat, /bali_adj.csv")
write.csv(bali_dat, "/bali_adj.csv")
write.csv(bali_dat, "~/Teaching/SNA/Spring 2025/DATA/Tom_network_data/One Mode Network Data/bali"/bali_adj.csv")
write.csv(bali_dat, "~/Teaching/SNA/Spring 2025/DATA/Tom_network_data/One Mode Network Data/bali/bali_adj.csv")
write.csv(bali_dat, "~/Teaching/SNA/Spring 2025/DATA/Tom_network_data/One Mode Network Data/bali/bali_adj.csv")
load("C:/Users/trleppar/Documents/Teaching/SNA/Spring 2025/DATA/network data_from Steve/igraph data/igraphdata/data/USairports.rda")
plot(USairports)
plot(USairports, edge.arrow.size = 0.2)
plot(USairports, edge.arrow.size = 0.2, vertex.label.cex = 0.5)
par(mar = c(0,0,0,0))
plot(USairports, edge.arrow.size = 0.2, vertex.label.cex = 0.5)
plot(USairports, edge.arrow.size = 0.2, vertex.label.cex = 0.5 vertex.size = 2)
par(mar = c(0,0,0,0))
plot(USairports, edge.arrow.size = 0.2, vertex.label.cex = 0.5, vertex.size = 2)
plot(USairports, edge.arrow.size = 0.2, vertex.label.cex = 0.25, vertex.size = 2)
par(mar = c(0,0,0,0))
plot(USairports, edge.arrow.size = 0.2, vertex.label.cex = 0.25, vertex.size = 2)
adj_bali <- as_adjacency_matrix(USairports)
mat_bali <- as.matrix(adj_bali)
bali_dat <- as.data.frame(mat_bali)
write.csv(bali_dat, "~/Teaching/SNA/Spring 2025/DATA/Tom_network_data/One Mode Network Data/Airport - Flights/USA_flights.csv")
