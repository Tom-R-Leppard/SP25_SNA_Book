geom_node_label(aes(label = name), fill = "lightblue") +
theme_void()
##### jaccard
similarity(fb, vids = c("101", "520")) # jaccard
similarity(fb, vids = c("101", "202")) # jaccard
##### dice
similarity(fb, vids = c("101", "202"), method = "dice")
# function for jaccard similarity of edge sets
jaccard_edgeset_similarity <- function(G1, G2) {
inter <- length(E(G1 %s% G2))
un <- length(E(G1 %u% G2))
if (un == 0) {
0
} else {
inter/un
}
}
# test
jaccard_edgeset_similarity(schoolfriends_fb_dir, schoolfriends_rp)
library(igraph)
library(ggraph)
library(dplyr)
#### get data
schoolfriends_edgelist <- read.csv(
"https://ona-book.org/data/schoolfriends_edgelist.csv")
schoolfriends_vertices <- read.csv(
"https://ona-book.org/data/schoolfriends_vertices.csv")
#### create undirected Facebook friendships graph
fb <- igraph::graph_from_data_frame(
d = schoolfriends_edgelist |>
dplyr::filter(type == "facebook"),
vertices = schoolfriends_vertices,
directed = FALSE)
#### create directed graph of reported friendships
rp <- igraph::graph_from_data_frame(
d = schoolfriends_edgelist |>
dplyr::filter(type == "reported"),
vertices = schoolfriends_vertices)
#### remove isolates
fb <- delete_vertices(fb, which(degree(fb)==0))
rp <- delete_vertices(rp, which(degree(rp)==0))
#### assortativity by class
assortativity_nominal(fb,
as.integer(as.factor(V(fb)$class)))
assortativity_nominal(rp,
as.integer(as.factor(V(rp)$class)))
#### degree assortativity
assortativity_degree(fb)
assortativity_degree(rp)
#### assortativity for continuous
V(fb)$degree <- degree(fb)
assortativity(fb, V(fb)$degree)
#### vertex similarity
ggraph(fb, layout = "fr") +
geom_edge_link(color = "grey") +
geom_node_label(aes(label = name), fill = "lightblue") +
theme_void()
##### jaccard
similarity(fb, vids = c("101", "520")) # jaccard
similarity(fb, vids = c("101", "202")) # jaccard
# function for jaccard similarity of edge sets
jaccard_edgeset_similarity <- function(G1, G2) {
inter <- length(E(G1 %s% G2))
un <- length(E(G1 %u% G2))
if (un == 0) {
0
} else {
inter/un
}
}
# test
jaccard_edgeset_similarity(schoolfriends_fb_dir, schoolfriends_rp)
# test
jaccard_edgeset_similarity(fb,rp)
fb
#### assortativity by class
assortativity_nominal(fb, as.integer(as.factor(V(fb)$class)))
assortativity_nominal(fb, as.integer(as.factor(V(fb)$gender)))
#### vertex similarity
set.seed(8675309)
ggraph(fb, layout = "fr") +
geom_edge_link(color = "grey") +
geom_node_label(aes(label = name), fill = "lightblue") +
theme_void()
##### jaccard
similarity(fb, vids = c("101", "883")) # jaccard
similarity(fb, vids = c("101", "201")) # jaccard
##### jaccard
similarity(fb, vids = c("101", "202")) # jaccard
similarity(fb, vids = c("101", "201")) # jaccard
##### jaccard
similarity(fb, vids = c("101", "883")) # jaccard
similarity(fb, vids = c("101", "201")) # jaccard
### Positional analysis
#### example graph
g <- graph( c("A","B",
"A","C",
"A","D",
"B","E",
"B","F",
"C","G",
"D","H",
"D","I"), directed = F)
ggraph(g, layout = "stress") +
geom_edge_link(color = "darkgrey") +
geom_node_point(color = "salmon", size = 10) +
geom_node_text(aes(label = name)) +
theme_void()
#### add and graph equivalence groups
V(g)$struct <- c(1,2,3,4,5,5,6,7,7)
V(g)$auto <- c(1,2,3,2,4,4,5,4,4)
V(g)$reg <- c(1,2,2,2,3,3,3,3,3)
ggraph(g, layout = "stress") +
geom_edge_link(color = "darkgrey") +
geom_node_point(aes(color = as.factor(struct)),
size = 10, show.legend = F) +
geom_node_text(aes(label = name)) +
ggtitle("Structural") +
theme_void()
ggraph(g, layout = "stress") +
geom_edge_link(color = "darkgrey") +
geom_node_point(aes(color = as.factor(auto)),
size = 10, show.legend = F) +
geom_node_text(aes(label = name)) +
ggtitle("Automorphic") +
theme_void()
ggraph(g, layout = "stress") +
geom_edge_link(color = "darkgrey") +
geom_node_point(aes(color = as.factor(reg)),
size = 10, show.legend = F) +
geom_node_text(aes(label = name)) +
ggtitle("Regular") +
theme_void()
### blockmodeling
library(blockmodeling)
#### obtain the adjacency matrix for the reported friends network
mat <- as.matrix(get.adjacency(rp))
#### obtain the adjacency matrix for the reported friends network
mat <- as.matrix(get_adjacency(rp))
#### obtain the adjacency matrix for the reported friends network
mat <- as_adjacency_matrix(fb)
#### try a two and a four block partition
class2 <- optRandomParC(
M=mat, k=2, rep=10, approach="ss", blocks="com")
class4 <- optRandomParC(
M=mat, k=4, rep=10, approach="ss", blocks="com")
#### visualize the permuted and partitioned matrices
par(mfrow=c(1,2))
plot(class2, main="")
title("Two Block Partition")
plot(class4, main="")
title("Four Block Partition")
##### the optimal partition for the four block
class4$best$best1$clu
##### add the block designations to igraph object and graph
V(rp)$opt.blocks <- class4$best$best1$clu
##### add the block designations to igraph object and graph
V(fb)$opt.blocks <- class4$best$best1$clu
ggraph(fb, layout = "fr") +
geom_edge_link(color = "grey") +
geom_node_point(aes(color = as.factor(opt.blocks)),
size = 2, show.legend = F) +
theme_void()
#### diagnostics
##### generate a null data frame
error <- as.data.frame(NULL)
##### index for the loop can be run separately for each row in the df
r <- 2:8
##### generate urls based on employer and job title combinations
for (i in r) {
class <- optRandomParC(M=mat, k=i, rep=10, approach="ss", blocks="com")
# bind the data and append to the dataframe
tempinfo <- cbind(i, as.numeric(class$err[10]))
error <- rbind(error, tempinfo)
}
##### plot the results - what is the best partition value?
ggplot(error, aes(x = i, y = V2)) +
geom_point()
#### aftermath
class6 <- optRandomParC(
M=mat, k=6, rep=10, approach="ss", blocks="com")
#### visualize the permuted and partitioned matrices
par(mfrow=c(1,1))
plot(class6, main="")
title("Four Block Partition")
title("Six Block Partition")
#### visualize the permuted and partitioned matrices
par(mfrow=c(1,1))
plot(class6, main="")
title("Six Block Partition")
##### the optimal partition for the four block
class6$best$best1$clu
##### add the block designations to igraph object and graph
V(fb)$opt.blocks <- class6$best$best1$clu
ggraph(fb, layout = "fr") +
geom_edge_link(color = "grey") +
geom_node_point(aes(color = as.factor(opt.blocks)),
size = 2, show.legend = F) +
theme_void()
library(igraph)
library(dplyr)
library(ggraph)
setwd("Q:/My Drive/teaching/SOC708/sna/network data/Florentine families")
load("ifm.rda")
load("ifb.rda")
ifm
library(igraph)
library(ggraph)
library(dplyr)
#### get data
schoolfriends_edgelist <- read.csv(
"https://ona-book.org/data/schoolfriends_edgelist.csv")
schoolfriends_vertices <- read.csv(
"https://ona-book.org/data/schoolfriends_vertices.csv")
#### create undirected Facebook friendships graph
fb <- igraph::graph_from_data_frame(
d = schoolfriends_edgelist |>
dplyr::filter(type == "facebook"),
vertices = schoolfriends_vertices,
directed = FALSE)
#### remove isolates
fb <- delete_vertices(fb, which(degree(fb)==0))
#### assortativity by class
assortativity_nominal(fb, as.integer(as.factor(V(fb)$class)))
assortativity_nominal(fb, as.integer(as.factor(V(fb)$gender)))
#### degree assortativity
assortativity_degree(fb)
#### assortativity for continuous
V(fb)$degree <- degree(fb)
assortativity(fb, V(fb)$degree)
#### vertex similarity
set.seed(8675309)
ggraph(fb, layout = "fr") +
geom_edge_link(color = "grey") +
geom_node_label(aes(label = name), fill = "lightblue") +
theme_void()
##### jaccard
similarity(fb, vids = c("101", "883")) # jaccard
similarity(fb, vids = c("101", "201")) # jaccard
### Positional analysis
#### example graph
g <- graph( c("A","B",
"A","C",
"A","D",
"B","E",
"B","F",
"C","G",
"D","H",
"D","I"), directed = F)
ggraph(g, layout = "stress") +
geom_edge_link(color = "darkgrey") +
geom_node_point(color = "salmon", size = 10) +
geom_node_text(aes(label = name)) +
theme_void()
#### add and graph equivalence groups
V(g)$struct <- c(1,2,3,4,5,5,6,7,7)
V(g)$auto <- c(1,2,3,2,4,4,5,4,4)
V(g)$reg <- c(1,2,2,2,3,3,3,3,3)
ggraph(g, layout = "stress") +
geom_edge_link(color = "darkgrey") +
geom_node_point(aes(color = as.factor(struct)),
size = 10, show.legend = F) +
geom_node_text(aes(label = name)) +
ggtitle("Structural") +
theme_void()
ggraph(g, layout = "stress") +
geom_edge_link(color = "darkgrey") +
geom_node_point(aes(color = as.factor(auto)),
size = 10, show.legend = F) +
geom_node_text(aes(label = name)) +
ggtitle("Automorphic") +
theme_void()
ggraph(g, layout = "stress") +
geom_edge_link(color = "darkgrey") +
geom_node_point(aes(color = as.factor(reg)),
size = 10, show.legend = F) +
geom_node_text(aes(label = name)) +
ggtitle("Regular") +
theme_void()
### blockmodeling
library(blockmodeling)
#### obtain the adjacency matrix for the reported friends network
mat <- as_adjacency_matrix(fb)
#### try a two and a four block partition
class2 <- optRandomParC(
M=mat, k=2, rep=10, approach="ss", blocks="com")
class4 <- optRandomParC(
M=mat, k=4, rep=10, approach="ss", blocks="com")
#### visualize the permuted and partitioned matrices
par(mfrow=c(1,2))
plot(class2, main="")
title("Two Block Partition")
plot(class4, main="")
title("Four Block Partition")
##### the optimal partition for the four block
class4$best$best1$clu
##### add the block designations to igraph object and graph
V(fb)$opt.blocks <- class4$best$best1$clu
ggraph(fb, layout = "fr") +
geom_edge_link(color = "grey") +
geom_node_point(aes(color = as.factor(opt.blocks)),
size = 2, show.legend = F) +
theme_void()
#### diagnostics
##### generate a null data frame
error <- as.data.frame(NULL)
##### index for the loop can be run separately for each row in the df
r <- 2:8
##### generate urls based on employer and job title combinations
for (i in r) {
class <- optRandomParC(M=mat, k=i, rep=10, approach="ss", blocks="com")
# bind the data and append to the dataframe
tempinfo <- cbind(i, as.numeric(class$err[10]))
error <- rbind(error, tempinfo)
}
##### plot the results - what is the best partition value?
ggplot(error, aes(x = i, y = V2)) +
geom_point()
#### aftermath
class6 <- optRandomParC(
M=mat, k=6, rep=10, approach="ss", blocks="com")
#### visualize the permuted and partitioned matrices
par(mfrow=c(1,1))
plot(class6, main="")
title("Six Block Partition")
##### the optimal partition for the four block
class6$best$best1$clu
##### add the block designations to igraph object and graph
V(fb)$opt.blocks <- class6$best$best1$clu
ggraph(fb, layout = "fr") +
geom_edge_link(color = "grey") +
geom_node_point(aes(color = as.factor(opt.blocks)),
size = 2, show.legend = F) +
theme_void()
# Load required libraries
library(ggraph)
library(igraph)
library(ggplot2)
library(dplyr)
# Create a random graph using preferential attachment model
set.seed(123)
b <- sample_pa(500, power = .5, directed = F)
# graph the network
ggraph(b, layout = "fr") +
geom_edge_link(alpha = 0.5) +
geom_node_point(size = 2) +
theme_void()
# Create a contour map on top of the network
ggraph(b, layout = "fr") +
geom_edge_link(alpha = 0.5) +
geom_node_point(size = 3) +
stat_density_2d(aes(x = x, y = y, fill = after_stat(level)), geom = "polygon", contour = TRUE) + # Contour map
scale_fill_viridis_c() +       # Color scale for contour levels
theme_void()                   # Clean background
library(statnet)
## Florentine marriage ties
data(florentine)
flomarriage
## QAP regression
qap_regression <- netlm(flobusiness, flomarriage, nullhyp = "qap")
summary(qap_regression)
## Model diagnostics
flo4 <- ergm(flomarriage ~ edges +
nodecov("wealth") +
absdiff("priorates"),
control = control.ergm(force.main = T))
ergm.AME(flo4,"nodecov.wealth")
library(ergMargins)
ergm.AME(flo4,"nodecov.wealth")
ergm.AME(flo4,"nodecov.wealth",
at.controls=c("absdiff.priorates","absdiff.priorates"),
control_vals=c(0,0))
library(statnet)
# create a network object in statnet
## generate network object from adjacency matrix
netmat1 <- rbind(c(0,1,1,0,0),
c(0,0,1,1,0),
c(0,1,0,0,0),
c(0,0,0,0,0),
c(0,0,1,0,0))
rownames(netmat1) <- c("A","B","C","D","E")
colnames(netmat1) <- c("A","B","C","D","E")
net1 <- network(netmat1,matrix.type="adjacency")
class(net1)
summary(net1)
ergm.AME(flo4,"absdiff.priorates",
at.controls=c("absdiff.priorates","absdiff.priorates"),
control_vals=c(0,0))
library(sna)
library(network)
library(networkDynamic)
## load the network data
url1 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/talk_nets_undirected.RData"
load(url(description = url1))
talk_time1
talk_time2
talk_time3
talk_time4
## gender and layout
gender <- get.vertex.attribute(talk_time1, "gender")
head(gender)
cols <- ifelse(gender == "male", "navy blue", "light blue")
locs <- network.layout.fruchtermanreingold(talk_time1, layout.par = NULL)
par(mfrow = c(1, 2))
plot(talk_time1, main = "Talk to Network, 0 to 10 Minutes",
vertex.col = cols, coord = locs, vertex.cex = 2)
plot(talk_time2, main = "Talk to Network, 10 to 20 Minutes",
vertex.col = cols, coord = locs, vertex.cex = 2)
## combine the networks as a networkDynamic object
net_dynamic_4periods <- networkDynamic(network.list = list(talk_time1,
talk_time2,
talk_time3,
talk_time4))
net_dynamic_4periods_dat <- as.data.frame(net_dynamic_4periods)
head(net_dynamic_4periods_dat)
## add seating edgelist (edge = sitting adjacent to)
url2 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/discrete_talk_nets_seating.txt"
seating_edgelist <- read.table(file = url2, header = T)
head(seating_edgelist)
seating_network <- network(x = seating_edgelist, directed = T,
vertices = data.frame(ids = 1:18))
seating_matrix <- symmetrize(seating_network, rule = "weak")
set.network.attribute(net_dynamic_4periods, "seating", seating_matrix)
## modeling the edges
library(tergm)
library(tsna)
### formation and persistence
stergm_mod1 <- tergm(net_dynamic_4periods ~ Form(~ edges) + Persist(~ edges),
estimate = "CMLE", times = 0:3)
summary(stergm_mod1)
exp(.4249) / (1 + exp(.4249)) # prob of a tie persisting from 1 period to the next
### can also model dissolution (opposite of persistence)
summary(tergm(net_dynamic_4periods ~ Form(~ edges) + Diss(~ edges),
estimate = "CMLE", times = 0:3))
### edges, homophily, and nodefactor
stergm_mod2 <- tergm(net_dynamic_4periods ~
Form(~ edges + nodematch("gender") +
nodefactor("gender") +
nodematch("race") +
nodefactor("race")) +
Persist(~ edges + nodematch("gender") +
nodefactor("gender") +
nodematch("race") +
nodefactor("race")),
estimate = "CMLE", times = 0:3)
summary(stergm_mod2) # white students initiate intxs at a lower rate
### seating
stergm_mod3 <- tergm(net_dynamic_4periods ~
Form(~ edges +
nodefactor("race") +
edgecov("seating")) +
Persist(~ edges +
nodefactor("gender") +
edgecov("seating")),
estimate = "CMLE", times = 0:3)
summary(stergm_mod3) # seating increases formation but not persistence
### gwesp
set.seed(107)
stergm_mod4 <- tergm(net_dynamic_4periods ~
Form(~ edges +
nodefactor("race") +
edgecov("seating") +
gwesp(decay = .5, fixed = T)) +
Persist(~ edges +
nodefactor("gender") +
edgecov("seating")),
estimate = "CMLE", times = 0:3,
control = control.tergm(CMLE.ergm =
control.ergm(MCMC.burnin = 50000,
MCMC.interval = 3000,
MCMC.samplesize = 6500)))
par(mfrow = c(1,1))
mcmc.diagnostics(stergm_mod4, vars.per.page = 4)
summary(stergm_mod4)
## model fit
### simulate networks based on the model
set.seed(130)
sim_mod4 <- simulate(stergm_mod4, nsim = 1, time.slices = 1000,
nw.start = 1, monitor = ~ edges + triadcensus(c(0, 1, 2, 3)))
sim_stats <- attributes(sim_mod4)$stats
head(sim_stats)
### obtain true (observed) values
true_values <- tErgmStats(nd = net_dynamic_4periods,
formula = '~ edges + triadcensus(c(0, 1, 2, 3))',
start = 0, end = 3)
true_values
### compare
sim_values <- apply(sim_stats, 2, summary)
rownames(sim_values) <- paste("sim", rownames(sim_values), sep = "_")
sim_values
true_values_mean <- colMeans(true_values)
rbind(sim_values, true_mean = true_values_mean) # too many intransitive triads (triadcensus.2)
net10 <- network.extract(sim_mod4, at = 10)
par(mfrow = c(1, 2))
plot(talk_time1, main = "Observed Network from 0-10 Minutes")
plot(net10, main = "Example Simulated Network")
library(igraph)
library(ggraph)
library(dplyr)
#### get data
schoolfriends_edgelist <- read.csv(
"https://ona-book.org/data/schoolfriends_edgelist.csv")
schoolfriends_vertices <- read.csv(
"https://ona-book.org/data/schoolfriends_vertices.csv")
#### create undirected Facebook friendships graph
fb <- igraph::graph_from_data_frame(
d = schoolfriends_edgelist |>
dplyr::filter(type == "facebook"),
vertices = schoolfriends_vertices,
directed = FALSE)
#### remove isolates
fb <- delete_vertices(fb, which(degree(fb)==0))
